use candid::{CandidType, Principal};
use ic_cdk::api::call::call;
use ic_cdk_macros::*;
use serde::{Deserialize, Serialize};

// Import generated types from NNS Governance canister
// This file will be generated by running ./scripts/generate_types.sh
mod declarations;

// Re-export the types we need
use declarations::nns_governance::{ListNeurons, ListNeuronsResponse};

// NNS Governance canister ID on mainnet
const NNS_GOVERNANCE_CANISTER_ID: &str = "rrkah-fqaaa-aaaaa-aaaaq-cai";

/// Update method to fetch and pretty-print neurons from NNS Governance
/// Note: This must be an update call because it makes inter-canister calls
#[update]
async fn list_neurons_pretty() -> String {
    match fetch_neurons().await {
        Ok(response) => {
            // Pretty print the response using serde_json for better formatting
            match serde_json::to_string_pretty(&response) {
                Ok(json) => format!("🧠 NNS Governance Neurons:\n{}", json),
                Err(_) => format!("🧠 NNS Governance Neurons (Debug):\n{:#?}", response),
            }
        }
        Err(err) => format!("❌ Error fetching neurons: {}", err),
    }
}

/// Internal function to fetch neurons from NNS Governance
async fn fetch_neurons() -> Result<ListNeuronsResponse, String> {
    // Create the governance canister principal
    let governance_principal = Principal::from_text(NNS_GOVERNANCE_CANISTER_ID)
        .map_err(|e| format!("Invalid governance canister ID: {}", e))?;

    // Prepare the request - we want to see neurons readable by the caller
    let request = ListNeurons {
        neuron_ids: vec![], // Empty vector to get all neurons (subject to permissions)
        include_neurons_readable_by_caller: true,
        include_empty_neurons_readable_by_caller: Some(false),
        include_public_neurons_in_full_neurons: Some(true),
        page_number: None,
        page_size: Some(10), // Limit to 10 neurons for demo purposes
        neuron_subaccounts: None,
    };

    // Make the inter-canister call
    let result: Result<(ListNeuronsResponse,), _> =
        call(governance_principal, "list_neurons", (request,)).await;

    match result {
        Ok((response,)) => Ok(response),
        Err((rejection_code, msg)) => Err(format!(
            "Inter-canister call failed with code {:?}: {}",
            rejection_code, msg
        )),
    }
}
