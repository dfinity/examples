type change_origin = variant {
    from_user : record {
        user_id : principal;
    };
    from_canister : record {
        canister_id : principal;
        canister_version : opt nat64;
    };
};

type change_details = variant {
    creation : record {
        controllers : vec principal;
    };
    code_uninstall;
    code_deployment : record {
        mode : variant { install; reinstall; upgrade };
        module_hash : blob;
    };
    controllers_change : record {
        controllers : vec principal;
    };
};

type change = record {
    timestamp_nanos : nat64;
    canister_version : nat64;
    origin : change_origin;
    details : change_details;
};

type canister_snapshot = variant {
    at_timestamp : nat64;
    at_version : nat64;
};

type canister_controllers_result = record {
    controllers : vec principal;
    max_clock_skew : opt nat64;
};

type canister_deployment_chain_result = record {
    deployment_chain : vec change;
    max_clock_skew : opt nat64;
};

type canister_module_hash_result = record {
    module_hash : opt blob;
    max_clock_skew : opt nat64;
};

type canister_info_result = record {
    total_num_changes : nat64;
    recent_changes : vec change;
    module_hash : opt blob;
    controllers : vec principal;
};

service : {
    canister_controllers : (principal, canister_snapshot) -> (opt canister_controllers_result);
    canister_deployment_chain : (principal, canister_snapshot) -> (canister_deployment_chain_result);
    canister_module_hash : (principal, canister_snapshot) -> (opt canister_module_hash_result);
    info : (principal) -> (canister_info_result);
    reflexive_transitive_controllers : (principal) -> (vec principal);
}
