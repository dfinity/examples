/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SetupImport } from './routes/setup'
import { Route as SendImport } from './routes/send'
import { Route as ReceiveImport } from './routes/receive'
import { Route as LoginImport } from './routes/login'
import { Route as HistoryImport } from './routes/history'
import { Route as ConfigImport } from './routes/config'
import { Route as ChargeImport } from './routes/charge'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SetupRoute = SetupImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => rootRoute,
} as any)

const SendRoute = SendImport.update({
  id: '/send',
  path: '/send',
  getParentRoute: () => rootRoute,
} as any)

const ReceiveRoute = ReceiveImport.update({
  id: '/receive',
  path: '/receive',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HistoryRoute = HistoryImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => rootRoute,
} as any)

const ConfigRoute = ConfigImport.update({
  id: '/config',
  path: '/config',
  getParentRoute: () => rootRoute,
} as any)

const ChargeRoute = ChargeImport.update({
  id: '/charge',
  path: '/charge',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/charge': {
      id: '/charge'
      path: '/charge'
      fullPath: '/charge'
      preLoaderRoute: typeof ChargeImport
      parentRoute: typeof rootRoute
    }
    '/config': {
      id: '/config'
      path: '/config'
      fullPath: '/config'
      preLoaderRoute: typeof ConfigImport
      parentRoute: typeof rootRoute
    }
    '/history': {
      id: '/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/receive': {
      id: '/receive'
      path: '/receive'
      fullPath: '/receive'
      preLoaderRoute: typeof ReceiveImport
      parentRoute: typeof rootRoute
    }
    '/send': {
      id: '/send'
      path: '/send'
      fullPath: '/send'
      preLoaderRoute: typeof SendImport
      parentRoute: typeof rootRoute
    }
    '/setup': {
      id: '/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/charge': typeof ChargeRoute
  '/config': typeof ConfigRoute
  '/history': typeof HistoryRoute
  '/login': typeof LoginRoute
  '/receive': typeof ReceiveRoute
  '/send': typeof SendRoute
  '/setup': typeof SetupRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/charge': typeof ChargeRoute
  '/config': typeof ConfigRoute
  '/history': typeof HistoryRoute
  '/login': typeof LoginRoute
  '/receive': typeof ReceiveRoute
  '/send': typeof SendRoute
  '/setup': typeof SetupRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/charge': typeof ChargeRoute
  '/config': typeof ConfigRoute
  '/history': typeof HistoryRoute
  '/login': typeof LoginRoute
  '/receive': typeof ReceiveRoute
  '/send': typeof SendRoute
  '/setup': typeof SetupRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/charge'
    | '/config'
    | '/history'
    | '/login'
    | '/receive'
    | '/send'
    | '/setup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/charge'
    | '/config'
    | '/history'
    | '/login'
    | '/receive'
    | '/send'
    | '/setup'
  id:
    | '__root__'
    | '/'
    | '/charge'
    | '/config'
    | '/history'
    | '/login'
    | '/receive'
    | '/send'
    | '/setup'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChargeRoute: typeof ChargeRoute
  ConfigRoute: typeof ConfigRoute
  HistoryRoute: typeof HistoryRoute
  LoginRoute: typeof LoginRoute
  ReceiveRoute: typeof ReceiveRoute
  SendRoute: typeof SendRoute
  SetupRoute: typeof SetupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChargeRoute: ChargeRoute,
  ConfigRoute: ConfigRoute,
  HistoryRoute: HistoryRoute,
  LoginRoute: LoginRoute,
  ReceiveRoute: ReceiveRoute,
  SendRoute: SendRoute,
  SetupRoute: SetupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/charge",
        "/config",
        "/history",
        "/login",
        "/receive",
        "/send",
        "/setup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/charge": {
      "filePath": "charge.tsx"
    },
    "/config": {
      "filePath": "config.tsx"
    },
    "/history": {
      "filePath": "history.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/receive": {
      "filePath": "receive.tsx"
    },
    "/send": {
      "filePath": "send.tsx"
    },
    "/setup": {
      "filePath": "setup.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
