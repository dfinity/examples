type AddWasmRequest = record { hash : vec nat8; wasm : opt SnsWasm };
type AddWasmResponse = record { result : opt Result };
type AirdropDistribution = record { airdrop_neurons : vec NeuronDistribution };
type DeployNewSnsRequest = record { sns_init_payload : opt SnsInitPayload };
type DeployNewSnsResponse = record {
  subnet_id : opt principal;
  error : opt SnsWasmError;
  canisters : opt SnsCanisterIds;
};
type DeployedSns = record { root_canister_id : opt principal };
type DeveloperDistribution = record {
  developer_neurons : vec NeuronDistribution;
};
type FractionalDeveloperVotingPower = record {
  treasury_distribution : opt TreasuryDistribution;
  developer_distribution : opt DeveloperDistribution;
  airdrop_distribution : opt AirdropDistribution;
  swap_distribution : opt SwapDistribution;
};
type GetNextSnsVersionRequest = record { current_version : opt SnsVersion };
type GetNextSnsVersionResponse = record { next_version : opt SnsVersion };
type GetWasmRequest = record { hash : vec nat8 };
type GetWasmResponse = record { wasm : opt SnsWasm };
type InitialTokenDistribution = variant {
  FractionalDeveloperVotingPower : FractionalDeveloperVotingPower;
};
type ListDeployedSnsesResponse = record { instances : vec DeployedSns };
type NeuronDistribution = record {
  controller : opt principal;
  dissolve_delay_seconds : nat64;
  memo : nat64;
  stake_e8s : nat64;
};
type Result = variant { Error : SnsWasmError; Hash : vec nat8 };
type SnsCanisterIds = record {
  root : opt principal;
  swap : opt principal;
  ledger : opt principal;
  governance : opt principal;
};
type SnsInitPayload = record {
  url : opt text;
  fallback_controller_principal_ids : vec text;
  token_symbol : opt text;
  neuron_minimum_stake_e8s : opt nat64;
  logo : opt text;
  name : opt text;
  neuron_minimum_dissolve_delay_to_vote_seconds : opt nat64;
  description : opt text;
  transaction_fee_e8s : opt nat64;
  sns_initialization_parameters : opt text;
  initial_token_distribution : opt InitialTokenDistribution;
  token_name : opt text;
  proposal_reject_cost_e8s : opt nat64;
};
type SnsVersion = record {
  archive_wasm_hash : vec nat8;
  root_wasm_hash : vec nat8;
  swap_wasm_hash : vec nat8;
  ledger_wasm_hash : vec nat8;
  governance_wasm_hash : vec nat8;
};
type SnsWasm = record { wasm : vec nat8; canister_type : int32 };
type SnsWasmCanisterInitPayload = record {
  access_controls_enabled : bool;
  sns_subnet_ids : vec principal;
};
type SnsWasmError = record { message : text };
type SwapDistribution = record {
  total_e8s : nat64;
  initial_swap_amount_e8s : nat64;
};
type TreasuryDistribution = record { total_e8s : nat64 };
service : (SnsWasmCanisterInitPayload) -> {
  add_wasm : (AddWasmRequest) -> (AddWasmResponse);
  deploy_new_sns : (DeployNewSnsRequest) -> (DeployNewSnsResponse);
  get_latest_sns_version_pretty : (null) -> (vec record { text; text }) query;
  get_next_sns_version : (GetNextSnsVersionRequest) -> (
      GetNextSnsVersionResponse,
    ) query;
  get_wasm : (GetWasmRequest) -> (GetWasmResponse) query;
  list_deployed_snses : (record {}) -> (ListDeployedSnsesResponse) query;
}