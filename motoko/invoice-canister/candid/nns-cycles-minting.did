type Cycles = nat;
type BlockIndex = nat64;

// The argument of the [notify_top_up] method.
type NotifyTopUpArg = record {
  // Index of the block on the ICP ledger that contains the payment.
  block_index : BlockIndex;

  // The canister to top up.
  canister_id : principal;
};

// The argument of the [notify_create_canister] method.
type NotifyCreateCanisterArg = record {
  // Index of the block on the ICP ledger that contains the payment.
  block_index : BlockIndex;

  // The controller of canister to create.
  controller : principal;

  // An optional subnet type that, if set, determines what type of subnet
  // the new canister will be created on.
  subnet_type: opt text;
};

type NotifyError = variant {
  // The payment processing failed and the payment was returned the caller.
  // This is a non-retriable error.
  Refunded : record {
    // The reason for the refund.
    reason : text;
    // The index of the block containing the refund.
    block_index : opt BlockIndex;
  };

  // The same payment is already being processed by a concurrent request.
  // This is a retriable error.
  Processing;

  // The payment was too old to be processed.
  // The value of the variant is the oldest block index that can still be processed.
  // This a non-retriable error.
  TransactionTooOld : BlockIndex;

  // The transaction does not satisfy the cycle minting canister payment protocol.
  // The text contains the description of the problem.
  // This is a non-retriable error.
  InvalidTransaction : text;

  // Other error.
  Other : record { error_code : nat64; error_message : text };
};

type NotifyTopUpResult = variant {
  // The amount of cycles sent to the specified canister.
  Ok : Cycles;
  Err : NotifyError;
};

type NotifyCreateCanisterResult = variant {
  // The principal of the newly created canister.
  Ok : principal;
  Err : NotifyError;
};

type IcpXdrConversionRate = record {
  // The time for which the market data was queried, expressed in UNIX epoch
  // time in seconds.
  timestamp_seconds : nat64;

  // The number of 10,000ths of IMF SDR (currency code XDR) that corresponds
  // to 1 ICP. This value reflects the current market price of one ICP token.
  xdr_permyriad_per_icp : nat64;
};


type IcpXdrConversionRateResponse = record {
  // The latest ICP/XDR conversion rate.
  data : IcpXdrConversionRate;

  // CBOR-serialized hash tree as specified in
  // https://smartcontracts.org/docs/interface-spec/index.html#certification-encoding.
  // The hash tree is used for certification and hash the following structure:
  // ```
  // *
  // |
  // +-- ICP_XDR_CONVERSION_RATE -- [ Candid encoded IcpXdrConversionRate ]
  // |
  // `-- AVERAGE_ICP_XDR_CONVERSION_RATE -- [ Candid encoded IcpXdrConversionRate ]
  // ```
  hash_tree : blob;

  // System certificate as specified in
  // https://smartcontracts.org/docs/interface-spec/index.html#certification-encoding
  certificate : blob;
};

type SubnetTypesToSubnetsResponse = record {
  data: vec record { text; vec principal };
}

service : {
  // Propmts the cycles minting canister to process a payment by converting ICP
  // into cycles and sending the cycles the specified canister.
  notify_top_up : (NotifyTopUpArg) -> (NotifyTopUpResult);

  // Prompts the cycles minting canister to process a payment for canister creation.
  notify_create_canister : (NotifyCreateCanisterArg) -> (NotifyCreateCanisterResult);

  // Returns the ICP/XDR conversion rate.
  get_icp_xdr_conversion_rate : () -> (IcpXdrConversionRateResponse) query;

  // Returns the current mapping of subnet types to subnets.
  get_subnet_types_to_subnets : () -> (SubnetTypesToSubnetsResponse) query;
}
